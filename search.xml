<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用VPS脚本</title>
      <link href="/undefined/%E5%B8%B8%E7%94%A8VPS%E8%84%9A%E6%9C%AC/"/>
      <url>/undefined/%E5%B8%B8%E7%94%A8VPS%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>1、DD重装脚本<br>史上最强脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO InstallNET.sh &#x27;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh&#x27; &amp;&amp; chmod a+x InstallNET.sh &amp;&amp; bash InstallNET.sh -debian 12 -pwd &#x27;password&#x27;</span><br></pre></td></tr></table></figure><p>萌咖大佬的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -d 11 -v 64 -p 密码 -port 端口 -a -firmware</span><br></pre></td></tr></table></figure><p>beta.gs大佬的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O NewReinstall.sh https://raw.githubusercontent.com/fcurrk/reinstall/master/NewReinstall.sh &amp;&amp; chmod a+x NewReinstall.sh &amp;&amp; bash NewReinstall.sh</span><br></pre></td></tr></table></figure><p>DD windows（使用史上最强DD脚本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh) -windows 10  -lang &quot;cn&quot;</span><br></pre></td></tr></table></figure><p>账户：Administrator<br>密码：Teddysun.com<br>2、综合测试脚本<br>LemonBench</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/LemonBench/LemonBench/main/LemonBench.sh | bash -s -- --fast</span><br></pre></td></tr></table></figure><p>融合怪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh)</span><br></pre></td></tr></table></figure><p>NodeBench</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://raw.githubusercontent.com/LloydAsp/NodeBench/main/NodeBench.sh)</span><br></pre></td></tr></table></figure><p>yabs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL yabs.sh | bash</span><br></pre></td></tr></table></figure><p>使用gb5测试yabs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL yabs.sh | bash -5</span><br></pre></td></tr></table></figure><p>3、性能测试<br>gb5专测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL bash.icu/gb5)</span><br></pre></td></tr></table></figure><p>4、流媒体及IP质量测试<br>最常用版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s check.unlock.media)</span><br></pre></td></tr></table></figure><p>原生检测脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL Media.Check.Place)</span><br></pre></td></tr></table></figure><p>准确度最高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://github.com/1-stream/RegionRestrictionCheck/raw/main/check.sh)</span><br></pre></td></tr></table></figure><p>IP质量体检脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL IP.Check.Place)</span><br></pre></td></tr></table></figure><p>5、测速脚本<br>Speedtest</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL bash.icu/speedtest)</span><br></pre></td></tr></table></figure><p>Taier</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL res.yserver.ink/taier.sh)</span><br></pre></td></tr></table></figure><p>hyperspeed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https://bench.im/hyperspeed)</span><br></pre></td></tr></table></figure><p>全球测速</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL network-speed.xyz | bash</span><br></pre></td></tr></table></figure><p>6、回程测试<br>直接显示回程（小白用这个）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/ludashi2020/backtrace/main/install.sh -sSf | sh</span><br></pre></td></tr></table></figure><p>回程详细测试（推荐）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/Chennhaoo/Shell_Bash/master/AutoTrace.sh &amp;&amp; chmod +x AutoTrace.sh &amp;&amp; bash AutoTrace.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://ghproxy.com/https://raw.githubusercontent.com/vpsxb/testrace/main/testrace.sh -O testrace.sh &amp;&amp; bash testrace.sh</span><br></pre></td></tr></table></figure><p>7、功能脚本<br>添加SWAP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.moerats.com/usr/shell/swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><p>Fail2ban</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh &amp;&amp; bash fail2ban.sh 2&gt;&amp;1 | tee fail2ban.log</span><br></pre></td></tr></table></figure><p>一键开启BBR，适用于较新的Debian、Ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>多功能BBR安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://gist.github.com/zeruns/a0ec603f20d1b86de6a774a8ba27588f/raw/4f9957ae23f5efb2bb7c57a198ae2cffebfb1c56/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>锐速&#x2F;BBRPLUS&#x2F;BBR2&#x2F;BBR3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O tcpx.sh &quot;https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><p>TCP窗口调优</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://sh.nekoneko.cloud/tools.sh -O tools.sh &amp;&amp; bash tools.sh</span><br></pre></td></tr></table></figure><p>添加SWAP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.moerats.com/usr/shell/swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><p>25端口开放测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet smtp.aol.com 25</span><br></pre></td></tr></table></figure><p>8、一键安装常用环境及软件<br>docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/lx969788249/lxspacepy/master/pyinstall.sh &amp;&amp; chmod +x pyinstall.sh &amp;&amp; ./pyinstall.sh</span><br></pre></td></tr></table></figure><p>iperf3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install iperf3</span><br></pre></td></tr></table></figure><p>realm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/zhouh047/realm-oneclick-install/main/realm.sh) -i</span><br></pre></td></tr></table></figure><p>gost</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/qqrrooty/EZgost/main/gost.sh &amp;&amp; chmod +x gost.sh &amp;&amp; ./gost.sh</span><br></pre></td></tr></table></figure><p>极光面板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -fsSL https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/install.sh)</span><br></pre></td></tr></table></figure><p>哪吒监控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh  -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo ./nezha.sh</span><br></pre></td></tr></table></figure><p>WARP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh &amp;&amp; bash menu.sh</span><br></pre></td></tr></table></figure><p>Aria2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; ./aria2.sh</span><br></pre></td></tr></table></figure><p>宝塔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://v7.hostcli.com/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure><p>PVE虚拟化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- --no-check-certificate https://raw.githubusercontent.com/oneclickvirt/pve/main/scripts/build_backend.sh)</span><br></pre></td></tr></table></figure><p>9、综合功能脚本<br>科技lion</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS -O https://kejilion.pro/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</span><br></pre></td></tr></table></figure><p>SKY-BOX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; chmod +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure><p>大部分从此贴整理，在此表示感谢。</p><p>本贴进行了部分新增和更新。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PVE8直通核显（N100），并开启虚拟化Sriov</title>
      <link href="/undefined/PVE8%E7%9B%B4%E9%80%9A%E6%A0%B8%E6%98%BE%EF%BC%88N100%EF%BC%89%EF%BC%8C%E5%B9%B6%E5%BC%80%E5%90%AF%E8%99%9A%E6%8B%9F%E5%8C%96Sriov/"/>
      <url>/undefined/PVE8%E7%9B%B4%E9%80%9A%E6%A0%B8%E6%98%BE%EF%BC%88N100%EF%BC%89%EF%BC%8C%E5%B9%B6%E5%BC%80%E5%90%AF%E8%99%9A%E6%8B%9F%E5%8C%96Sriov/</url>
      
        <content type="html"><![CDATA[<p>在BIOS开启VT-D，安装PVE8.1系统。<br>以下正式开始直通：</p><p>1、开启IOMMU直通功能</p><p><strong>nano &#x2F;etc&#x2F;default&#x2F;grub</strong></p><p>2、找到：GRUB_CMDLINE_LINUX_DEFAULT&#x3D;“quiet”，改为如下：</p><p><strong>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet intel_iommu&#x3D;on i915.enable_guc&#x3D;3 i915.max_vfs&#x3D;7”</strong></p><p>3、使用命令 update-grub 保存更改并更新grub，并reboot重启.</p><p><strong>update-grub</strong><br>#重启<br><strong>reboot</strong></p><p>4、重启完后，运行dmesg | grep -e DMAR -e IOMMU看看有没输出，如果没有，说明IOMMU开启不成功。</p><p><strong>dmesg | grep -e DMAR -e IOMMU</strong></p><p>输出如下（未展示完整），设备不同，显示的信息也不同：</p><p><strong>[    0.014745] ACPI: DMAR 0x00000000734DC000 000088 (v02 INTEL  EDK2     00000002      01000013)</strong><br><strong>[    0.014780] ACPI: Reserving DMAR table memory at [mem 0x734dc000-0x734dc087]</strong><br><strong>[    0.046876] DMAR: IOMMU enabled</strong><br><strong>[    0.106676] DMAR: Host address width 39</strong><br><strong>[    0.106677] DMAR: DRHD base: 0x000000fed90000 flags: 0x0</strong><br><strong>[    0.106682] DMAR: dmar0: reg_base_addr fed90000 ver 4:0 cap 1c0000c40660462 ecap 29a00f0505e</strong><br><strong>[    0.106684] DMAR: DRHD base: 0x000000fed91000 flags: 0x1</strong><br><strong>[    0.106688] DMAR: dmar1: reg_base_addr fed91000 ver 5:0 cap d2008c40660462 ecap f050da</strong><br><strong>[    0.106690] DMAR: RMRR base: 0x0000007c000000 end: 0x000000803fffff</strong></p><p>5、增加虚拟化驱动，加载vifo系统模块</p><p><strong>nano &#x2F;etc&#x2F;modules</strong></p><p>添加如下内容</p><p><strong>vfio</strong><br><strong>vfio_iommu_type1</strong><br><strong>vfio_pci</strong><br><strong>vfio_virqfd</strong></p><p> 这仅在必要时启用IOMMU转换，将iommu分组相关的内核模块启用，从而可以提高VM中未使用的PCIe设备的性能。</p><p>6、查询PVE8系统的内核版本</p><p><strong>uname -r</strong></p><p>显示</p><p><strong>6.5.11-7-pve</strong></p><p>可以看到内核版本是6.5.11-7-pve<br>根据这个版本来下载相应的Headers文件并安装。下载地址：<a href="http://mirrors.ustc.edu.cn/proxmox/debian/dists/bookworm/pve-no-subscription/binary-amd64/">http://mirrors.ustc.edu.cn/proxmox/debian/dists/bookworm/pve-no-subscription/binary-amd64/</a><br>7、安装Headers文件</p><p><strong>wget <a href="http://mirrors.ustc.edu.cn/proxmox/debian/dists/bookworm/pve-no-subscription/binary-amd64/proxmox-headers-6.5.11-7-pve_6.5.11-7_amd64.deb">http://mirrors.ustc.edu.cn/proxmox/debian/dists/bookworm/pve-no-subscription/binary-amd64/proxmox-headers-6.5.11-7-pve_6.5.11-7_amd64.deb</a></strong></p><p><strong>dpkg -i proxmox-headers-6.5.11-7-pve_6.5.11-7_amd64.deb</strong></p><p>安装成功，显示：</p><p><strong>root@pve:~# dpkg -i proxmox-headers-6.5.11-7-pve_6.5.11-7_amd64.deb</strong><br><strong>Selecting previously unselected package proxmox-headers-6.5.11-7-pve.</strong><br><strong>(Reading database … 142444 files and directories currently installed.)</strong><br><strong>Preparing to unpack proxmox-headers-6.5.11-7-pve_6.5.11-7_amd64.deb …</strong><br><strong>Unpacking proxmox-headers-6.5.11-7-pve (6.5.11-7) …</strong><br><strong>Setting up proxmox-headers-6.5.11-7-pve (6.5.11-7) …</strong></p><p>8、正式安装Sriov<br>安装一些包</p><p><em><em>apt install -y  build-</em> git unzip dkms</em>*</p><p>下载Sriov驱动</p><p><strong>git clone <a href="https://github.com/strongtz/i915-sriov-dkms.git">https://github.com/strongtz/i915-sriov-dkms.git</a></strong></p><p>把clone的文件放到&#x2F;usr&#x2F;src去</p><p><strong>mv i915-sriov-dkms &#x2F;usr&#x2F;src</strong></p><p>编辑&#x2F;usr&#x2F;src&#x2F;i915-sriov-dkms&#x2F;dkms.conf</p><p><strong>nano &#x2F;usr&#x2F;src&#x2F;i915-sriov-dkms&#x2F;dkms.conf</strong></p><p>按实际情况修改为：</p><p><strong>PACKAGE_NAME&#x3D;”i915-sriov-dkms”</strong><br><strong>PACKAGE_VERSION&#x3D;”6.5”</strong></p><p>保存。<br>用dkms安装i915-sriov</p><p><strong>dkms install -m i915-sriov -v dkms –force</strong></p><p>检查一下有没有成功</p><p><strong>dkms status</strong></p><p>正常输出如下</p><p><strong>i915-sriov-dkms&#x2F;6.5, 6.5.11-7-pve, x86_64: installed</strong></p><p>重启</p><p><strong>reboot</strong></p><p>9、添加开机启动Sriov脚本</p><p><strong>echo ‘#!&#x2F;bin&#x2F;bash’ &gt;&gt;&#x2F;etc&#x2F;rc.local</strong><br><strong>echo “echo 7 &gt; &#x2F;sys&#x2F;devices&#x2F;pci0000:00&#x2F;0000:00:02.0&#x2F;sriov_numvfs” &gt;&gt;&#x2F;etc&#x2F;rc.local</strong><br><strong>chmod +x &#x2F;etc&#x2F;rc.local</strong></p><p>注意，这里是开启7个vf，如果你想开2个vf，就改成2。<br>10、重启主机验证<br>经过这样的步骤，重启之后，使用lspci，可以看到多个0000:00:02设备。即代表成功。，如果要直通，按照正常的直通流程就行。</p><p>11、虚拟机要求<br>对于虚拟机配置，要求为OVMF+Q35配置。如果需要解码。请将虚拟机的显卡设置成无。对于Windows虚拟机，也需要将显卡设置无才能正常驱动。<br>Linux 排错<br>如果没有出现renderD128，那么请使用命令dmesg|grep i915获取日志。</p><p>Windows虚拟机<br>在必须满足虚拟机配置的前提下：安装当前最新的驱动，下面2个，二选一自行测试。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Serv00 CT8 VPS用gost创建socks5和隧道，免开代理软件登录Telegram，同时加入CM的CF Vless&amp;Trojan做反代</title>
      <link href="/undefined/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84%E5%8D%9A%E6%96%87/"/>
      <url>/undefined/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>前言</p><p>这篇文章主要面相的群体是小白，并不适合大佬，所以这里只做步骤讲解，我就不把脚本放出来让各位大佬贱笑了。而且尽量零成本，能不花钱就不花钱，服务能用白嫖的就用白嫖。</p><p>为什么有这篇教程，其实这个教程只是建立socks5给CM的CF Vless和trojan项目做反代使用的副产品，因为你既然已经有建立socks5的需求了，而且希望建立socks5服务放到自己CF的部署里面做反代使用。就顺便加一个隧道，让你的socks5可以在telegram上使用，或者说通过隧道过墙，然后用自己家里的宽带进行中转，让你在国内也可以使用这个socks5，因为直连socks5会导致你的VPS端口在一根烟的时间内被墙干掉，所以不要直连socks5！不要直连socks5！不要直连socks5！</p><p>有几种人是不需要这个教程的:</p><p>运行telegram的手机上24小时挂着代理软件的<br>使用免费mtproto代理，不介意广告的<br>家里使用运行了openwrt的路由器，路由器桥接有公网ip，并且上面已经运行了Passwall或者Clash系的代理软件的 （因为满足这个条件的人可以直接用这些软件开个socks5服务来用）<br>手里有付费高速中转或者国内有VPS的<br>开始前的必备条件:<br>落地:一台国外的VPS，这里用免费的serv00做例子</p><p>中转:这个条件有点多，但是我认为多数人都应该符合</p><p>家里网络有公网ip<br>路由器支持DDNS动态域名服务，并且你也已经注册了一个免费的动态域名服务，并在路由器上启动了<br>一台因为太老旧已经几年没开机的Android手机，要求能充进去电可以开机并且触屏正常工作，（主打一个成本低，其实你可以换成其它用了Android的旧播放器，NAS，等设备）<br>注:公网ip是必要条件，由于内网穿透要不就是收费服务，要不就是免费可怜的1Mbps通道，所以这里不讲这个，你如果没有公网ip或者打电话给你的ISP要求改桥接也不给你分配公网ip，你就没必要往下看了。</p><p>落地部分<br>登录serv00的面板，然后开启允许运行自定义程序，再去端口设置里开启两个TCP端口，一个作为socks5代理端口使用，一个作为gost的隧道端口使用</p><p>示例：</p><p>serv00用户名: aabbcc</p><p>serv00分配给你的域名为:aabbcc.serv00.net</p><p>socks5端口:5320</p><p>gost隧道端口:22920</p><p>代理用户名:oneforall</p><p>代理密码:allforone</p><p>手机ssh用户名:u0_a142</p><p>手机ssh密码:test1234</p><p>手机Wi-Fi的ip地址:192.168.1.158</p><p>接下来所有使用以上信息的都只是例子而已，如果你要真正的操作，要对用到以上内容的命令做出按照你的实际情况对应的修改。</p><p>登录你的VPS，切换目录  cd domains&#x2F;aabbcc.serv00.net&#x2F;logs&#x2F;<br>下载对应版本的gost，由于serv00是freebsd，所以下面命令的地址是freebsd的，如果你是linux，请自行把下载地址改成对应的linux下载地址，这里不赘述 wget <a href="https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz">https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz</a> 注:这里我用的是2024年8月1号的版本，如果你看到这篇文章的日期不是这个时间，说明已经有新版本了，自己去<a href="https://github.com/go-gost/gost/releases%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2">https://github.com/go-gost/gost/releases里面找到最新版本的下载链接进行替换</a><br>把gost解压缩出来 tar -zxvf gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz<br>生成所需的config.json配置文件，按照示例的地址和端口信息 .&#x2F;gost -L socks:&#x2F;&#x2F;oneforall:allforone@:5320 -L relay+wss:&#x2F;&#x2F;:22920&#x2F;127.0.0.1:5320 -O json &gt; config.json<br>把gost文件改名成web (规避被平台检测风险) mv gost web<br>调用config.json启动gost nohup .&#x2F;web -C config.json &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>确认代理和隧道服务启动成功 ps aux | grep .&#x2F;web 看到shell的信息里面有.&#x2F;web -C config.json字样的条目存在就是启动了 测试一下代理是否连通curl ip.sb –socks5 oneforall:allforone@localhost:5320 看到反馈的是ip地址，就证明socks5服务已经通了，你已经可以把这个socks5加入你CF Vless&amp;Trojan的socks5变量里使用了<br>删除刚才下载和生成的所有文件 （规避被平台检测风险） rm web config.json temp.tar.gz LICENSE README.md README_en.md gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz 现在你的serv00上除了一条进程，没有任何刚才使用的文件保留在服务器上，日后如果因为serv00的原因服务器重启或者进程被杀，你需要重新进行一次1到8的操作来重新部署<br>不是很多余的提示<br>现在你的socks5服务器就是 oneforall:<a href="mailto:&#x61;&#108;&#x6c;&#x66;&#111;&#114;&#x6f;&#110;&#101;&#x40;&#x61;&#97;&#x62;&#98;&#x63;&#x63;&#x2e;&#x73;&#x65;&#x72;&#118;&#x30;&#48;&#x2e;&#x6e;&#101;&#116;">&#x61;&#108;&#x6c;&#x66;&#111;&#114;&#x6f;&#110;&#101;&#x40;&#x61;&#97;&#x62;&#98;&#x63;&#x63;&#x2e;&#x73;&#x65;&#x72;&#118;&#x30;&#48;&#x2e;&#x6e;&#101;&#116;</a>:5320 把这一串添加到你部署的CF项目变量里面，不会操作的可以去看CM的教学视频<br>为什么不教保活？因为我觉得没有必要，可能没等到你保活，serv00先干掉你的号了<br>中转部分<br>gost支持众多平台，这里我们选择手机，因为已经老旧应该扔进垃圾箱的Android手机一般人都有，容易获得。</p><p>开始</p><p>去下载termux <a href="https://github.com/termux/termux-app/releases">https://github.com/termux/termux-app/releases</a></p><p>安装启动，在手机上操作</p><p>安装ssh pkg install openssh 默认端口为8022 启动ssh服务 sshd 设置termux运行自动启动ssh服务 echo “sshd” &gt;&gt; ~&#x2F;.bashrc<br>查看用户名 whoami 返回的字串为用户名，抄下来u0_a142<br>输入passwd更改密码，输入test1234两次密码更改完成<br>打开你手机的Wi-Fi设置，在你的Wi-Fi属性里，把IP设置从DHCP的自动分配，改成静态地址，这里改成192.168.1.158<br>接下来的操作都是在电脑上</p><p>打开你的ssh客户端，用刚才的信息ssh登录手机 地址：192.168.1.158 端口8022 用户名u0_a142 密码test1234<br>安装所需的软件pkg install curl wget<br>mkdir gost 然后cd gost 进入目录<br>wget <a href="https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_linux_armv7.tar.gz">https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_linux_armv7.tar.gz</a> 下载gost的armv7版本，这里我用的是2024年8月1号的版本，如果你看到这篇文章的日期不是这个时间，说明已经有新版本了，自己去<a href="https://github.com/go-gost/gost/releases%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84armv7%E7%89%88%E6%9C%AC%EF%BC%8C%E6%8A%8Awget%E5%90%8E%E9%9D%A2%E7%9A%84%E9%93%BE%E6%8E%A5%E6%9B%BF%E6%8D%A2%E3%80%82">https://github.com/go-gost/gost/releases找到最新的armv7版本，把wget后面的链接替换。</a><br>tar -zxvf gost_3.0.0-nightly.20240801_linux_armv7.tar.gz 把里面的gost解压出来，剩下的所有文件删掉，rm gost_3.0.0-nightly.20240801_linux_armv7.tar.gz LICENSE README.md README_en.md<br>生成所需的config.json配置文件，按照示例的地址和端口信息 .&#x2F;gost -L tcp:&#x2F;&#x2F;:7320 -F relay+wss:&#x2F;&#x2F;128.204.223.113:22920 -O json &gt; config.json<br>调用config.json启动gost nohup .&#x2F;gost -C config.json &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; 看到反馈的一串数字，就是已经在后台启动了，断开ssh链接也会保持运行<br>测试socks5是否可以通过隧道成功过墙 curl ip.sb –socks5 oneforall:allforone@localhost:7320 看到反馈的远程服务器ip地址即为成功，反馈任何其它内容都是失败，重新检查你的操作。<br>在你的路由器上开启DDNS动态域名服务（路由器型号众多，DDNS服务众多，这篇文章不教学，请自行google如何在你的路由器上使用DDNS动态域名服务），并在防火墙里放行socks5所使用的tcp 7320端口。<br>在你的Telegram的代理设置里，添加socks5代理，服务器地址：你的DDNS域名 端口:7320 用户名 密码 现在你就可以安全的使用这个中转了的socks5登录telegram而不会被墙了<br>不是很多余的提示<br>为了避免手机清理后台termux被杀掉，或者有些手机息屏一段时间后后断开Wi-Fi，最好在手机的省电设置里把termux允许后台高耗电打开，不同类型的手机避免杀后台操作请自行访问google.com查询，这篇文章不是为了教学这部分知识。然后在手机的设置里设置Wi-Fi保持连接，息屏以后也不断开，如果你的手机需要这么设置。<br>手机长期插电注意火灾隐患。<br>查看gost进程 ps aux | grep gost<br>杀掉gost进程 pkill -f ‘.&#x2F;gost’<br>因任何意外导致手机重启，或者termux重启，导致gost被关闭，只需打开termux，然后电脑或者手机上cd gost进入程序所在目录，重新执行一遍7的命令即可<br>一些高级用法，比如手机重启以后自动运行termux，配合Termux:boot实现termux启动以后自动运行脚本来实现gost自动启动，请自行google相关文章实现，这里不做教学<br>为什么你觉得有点慢？最重要还是你没花钱，因为你的中转是你自己，速度上依然等于直连波兰万人骑服务器，如果能和付费中转服务比速度那就是痴心妄想了，再说你用的旧手机Wi-Fi连你路由器还有个负面加成呢</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
