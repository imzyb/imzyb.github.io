<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Serv00 CT8 VPS用gost创建socks5和隧道，免开代理软件登录Telegram，同时加入CM的CF Vless&amp;Trojan做反代</title>
      <link href="/undefined/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84%E5%8D%9A%E6%96%87/"/>
      <url>/undefined/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>前言</p><p>这篇文章主要面相的群体是小白，并不适合大佬，所以这里只做步骤讲解，我就不把脚本放出来让各位大佬贱笑了。而且尽量零成本，能不花钱就不花钱，服务能用白嫖的就用白嫖。</p><p>为什么有这篇教程，其实这个教程只是建立socks5给CM的CF Vless和trojan项目做反代使用的副产品，因为你既然已经有建立socks5的需求了，而且希望建立socks5服务放到自己CF的部署里面做反代使用。就顺便加一个隧道，让你的socks5可以在telegram上使用，或者说通过隧道过墙，然后用自己家里的宽带进行中转，让你在国内也可以使用这个socks5，因为直连socks5会导致你的VPS端口在一根烟的时间内被墙干掉，所以不要直连socks5！不要直连socks5！不要直连socks5！</p><p>有几种人是不需要这个教程的:</p><p>运行telegram的手机上24小时挂着代理软件的<br>使用免费mtproto代理，不介意广告的<br>家里使用运行了openwrt的路由器，路由器桥接有公网ip，并且上面已经运行了Passwall或者Clash系的代理软件的 （因为满足这个条件的人可以直接用这些软件开个socks5服务来用）<br>手里有付费高速中转或者国内有VPS的<br>开始前的必备条件:<br>落地:一台国外的VPS，这里用免费的serv00做例子</p><p>中转:这个条件有点多，但是我认为多数人都应该符合</p><p>家里网络有公网ip<br>路由器支持DDNS动态域名服务，并且你也已经注册了一个免费的动态域名服务，并在路由器上启动了<br>一台因为太老旧已经几年没开机的Android手机，要求能充进去电可以开机并且触屏正常工作，（主打一个成本低，其实你可以换成其它用了Android的旧播放器，NAS，等设备）<br>注:公网ip是必要条件，由于内网穿透要不就是收费服务，要不就是免费可怜的1Mbps通道，所以这里不讲这个，你如果没有公网ip或者打电话给你的ISP要求改桥接也不给你分配公网ip，你就没必要往下看了。</p><p>落地部分<br>登录serv00的面板，然后开启允许运行自定义程序，再去端口设置里开启两个TCP端口，一个作为socks5代理端口使用，一个作为gost的隧道端口使用</p><p>示例：</p><p>serv00用户名: aabbcc</p><p>serv00分配给你的域名为:aabbcc.serv00.net</p><p>socks5端口:5320</p><p>gost隧道端口:22920</p><p>代理用户名:oneforall</p><p>代理密码:allforone</p><p>手机ssh用户名:u0_a142</p><p>手机ssh密码:test1234</p><p>手机Wi-Fi的ip地址:192.168.1.158</p><p>接下来所有使用以上信息的都只是例子而已，如果你要真正的操作，要对用到以上内容的命令做出按照你的实际情况对应的修改。</p><p>登录你的VPS，切换目录  cd domains&#x2F;aabbcc.serv00.net&#x2F;logs&#x2F;<br>下载对应版本的gost，由于serv00是freebsd，所以下面命令的地址是freebsd的，如果你是linux，请自行把下载地址改成对应的linux下载地址，这里不赘述 wget <a href="https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz">https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz</a> 注:这里我用的是2024年8月1号的版本，如果你看到这篇文章的日期不是这个时间，说明已经有新版本了，自己去<a href="https://github.com/go-gost/gost/releases%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2">https://github.com/go-gost/gost/releases里面找到最新版本的下载链接进行替换</a><br>把gost解压缩出来 tar -zxvf gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz<br>生成所需的config.json配置文件，按照示例的地址和端口信息 .&#x2F;gost -L socks:&#x2F;&#x2F;oneforall:allforone@:5320 -L relay+wss:&#x2F;&#x2F;:22920&#x2F;127.0.0.1:5320 -O json &gt; config.json<br>把gost文件改名成web (规避被平台检测风险) mv gost web<br>调用config.json启动gost nohup .&#x2F;web -C config.json &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>确认代理和隧道服务启动成功 ps aux | grep .&#x2F;web 看到shell的信息里面有.&#x2F;web -C config.json字样的条目存在就是启动了 测试一下代理是否连通curl ip.sb –socks5 oneforall:allforone@localhost:5320 看到反馈的是ip地址，就证明socks5服务已经通了，你已经可以把这个socks5加入你CF Vless&amp;Trojan的socks5变量里使用了<br>删除刚才下载和生成的所有文件 （规避被平台检测风险） rm web config.json temp.tar.gz LICENSE README.md README_en.md gost_3.0.0-nightly.20240801_freebsd_amd64.tar.gz 现在你的serv00上除了一条进程，没有任何刚才使用的文件保留在服务器上，日后如果因为serv00的原因服务器重启或者进程被杀，你需要重新进行一次1到8的操作来重新部署<br>不是很多余的提示<br>现在你的socks5服务器就是 oneforall:<a href="mailto:&#x61;&#108;&#x6c;&#102;&#111;&#114;&#x6f;&#x6e;&#x65;&#x40;&#97;&#x61;&#x62;&#98;&#x63;&#x63;&#46;&#x73;&#x65;&#x72;&#118;&#x30;&#48;&#46;&#110;&#x65;&#116;">&#x61;&#108;&#x6c;&#102;&#111;&#114;&#x6f;&#x6e;&#x65;&#x40;&#97;&#x61;&#x62;&#98;&#x63;&#x63;&#46;&#x73;&#x65;&#x72;&#118;&#x30;&#48;&#46;&#110;&#x65;&#116;</a>:5320 把这一串添加到你部署的CF项目变量里面，不会操作的可以去看CM的教学视频<br>为什么不教保活？因为我觉得没有必要，可能没等到你保活，serv00先干掉你的号了<br>中转部分<br>gost支持众多平台，这里我们选择手机，因为已经老旧应该扔进垃圾箱的Android手机一般人都有，容易获得。</p><p>开始</p><p>去下载termux <a href="https://github.com/termux/termux-app/releases">https://github.com/termux/termux-app/releases</a></p><p>安装启动，在手机上操作</p><p>安装ssh pkg install openssh 默认端口为8022 启动ssh服务 sshd 设置termux运行自动启动ssh服务 echo “sshd” &gt;&gt; ~&#x2F;.bashrc<br>查看用户名 whoami 返回的字串为用户名，抄下来u0_a142<br>输入passwd更改密码，输入test1234两次密码更改完成<br>打开你手机的Wi-Fi设置，在你的Wi-Fi属性里，把IP设置从DHCP的自动分配，改成静态地址，这里改成192.168.1.158<br>接下来的操作都是在电脑上</p><p>打开你的ssh客户端，用刚才的信息ssh登录手机 地址：192.168.1.158 端口8022 用户名u0_a142 密码test1234<br>安装所需的软件pkg install curl wget<br>mkdir gost 然后cd gost 进入目录<br>wget <a href="https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_linux_armv7.tar.gz">https://github.com/go-gost/gost/releases/download/v3.0.0-nightly.20240801/gost_3.0.0-nightly.20240801_linux_armv7.tar.gz</a> 下载gost的armv7版本，这里我用的是2024年8月1号的版本，如果你看到这篇文章的日期不是这个时间，说明已经有新版本了，自己去<a href="https://github.com/go-gost/gost/releases%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84armv7%E7%89%88%E6%9C%AC%EF%BC%8C%E6%8A%8Awget%E5%90%8E%E9%9D%A2%E7%9A%84%E9%93%BE%E6%8E%A5%E6%9B%BF%E6%8D%A2%E3%80%82">https://github.com/go-gost/gost/releases找到最新的armv7版本，把wget后面的链接替换。</a><br>tar -zxvf gost_3.0.0-nightly.20240801_linux_armv7.tar.gz 把里面的gost解压出来，剩下的所有文件删掉，rm gost_3.0.0-nightly.20240801_linux_armv7.tar.gz LICENSE README.md README_en.md<br>生成所需的config.json配置文件，按照示例的地址和端口信息 .&#x2F;gost -L tcp:&#x2F;&#x2F;:7320 -F relay+wss:&#x2F;&#x2F;128.204.223.113:22920 -O json &gt; config.json<br>调用config.json启动gost nohup .&#x2F;gost -C config.json &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; 看到反馈的一串数字，就是已经在后台启动了，断开ssh链接也会保持运行<br>测试socks5是否可以通过隧道成功过墙 curl ip.sb –socks5 oneforall:allforone@localhost:7320 看到反馈的远程服务器ip地址即为成功，反馈任何其它内容都是失败，重新检查你的操作。<br>在你的路由器上开启DDNS动态域名服务（路由器型号众多，DDNS服务众多，这篇文章不教学，请自行google如何在你的路由器上使用DDNS动态域名服务），并在防火墙里放行socks5所使用的tcp 7320端口。<br>在你的Telegram的代理设置里，添加socks5代理，服务器地址：你的DDNS域名 端口:7320 用户名 密码 现在你就可以安全的使用这个中转了的socks5登录telegram而不会被墙了<br>不是很多余的提示<br>为了避免手机清理后台termux被杀掉，或者有些手机息屏一段时间后后断开Wi-Fi，最好在手机的省电设置里把termux允许后台高耗电打开，不同类型的手机避免杀后台操作请自行访问google.com查询，这篇文章不是为了教学这部分知识。然后在手机的设置里设置Wi-Fi保持连接，息屏以后也不断开，如果你的手机需要这么设置。<br>手机长期插电注意火灾隐患。<br>查看gost进程 ps aux | grep gost<br>杀掉gost进程 pkill -f ‘.&#x2F;gost’<br>因任何意外导致手机重启，或者termux重启，导致gost被关闭，只需打开termux，然后电脑或者手机上cd gost进入程序所在目录，重新执行一遍7的命令即可<br>一些高级用法，比如手机重启以后自动运行termux，配合Termux:boot实现termux启动以后自动运行脚本来实现gost自动启动，请自行google相关文章实现，这里不做教学<br>为什么你觉得有点慢？最重要还是你没花钱，因为你的中转是你自己，速度上依然等于直连波兰万人骑服务器，如果能和付费中转服务比速度那就是痴心妄想了，再说你用的旧手机Wi-Fi连你路由器还有个负面加成呢</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/undefined/hello-world/"/>
      <url>/undefined/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
